/**
 * WARNING: This file is automatically generated from:
 *  'src/scripting/wrapper.interface.hpp'
 * DO NOT CHANGE
 */
#include <config.h>

#include <new>
#include <assert.h>
#include <string>
#include <sstream>
#include <squirrel.h>
#include "squirrel_error.hpp"
#include "wrapper.interface.hpp"

namespace Scripting
{
namespace Wrapper
{

static int DisplayEffect_release_hook(SQUserPointer ptr, int )
{
  Scripting::DisplayEffect* _this = reinterpret_cast<Scripting::DisplayEffect*> (ptr);
  delete _this;
  return 0;
}

static int DisplayEffect_fade_out_wrapper(HSQUIRRELVM vm)
{
  Scripting::DisplayEffect* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'fade_out' called without instance"));
    return SQ_ERROR;
  }
  float arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  
  try {
    _this->fade_out(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'fade_out'"));
    return SQ_ERROR;
  }
  
}

static int DisplayEffect_fade_in_wrapper(HSQUIRRELVM vm)
{
  Scripting::DisplayEffect* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'fade_in' called without instance"));
    return SQ_ERROR;
  }
  float arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  
  try {
    _this->fade_in(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'fade_in'"));
    return SQ_ERROR;
  }
  
}

static int DisplayEffect_set_black_wrapper(HSQUIRRELVM vm)
{
  Scripting::DisplayEffect* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'set_black' called without instance"));
    return SQ_ERROR;
  }
  SQBool arg0;
  if(SQ_FAILED(sq_getbool(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a bool"));
    return SQ_ERROR;
  }
  
  try {
    _this->set_black(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_black'"));
    return SQ_ERROR;
  }
  
}

static int DisplayEffect_is_black_wrapper(HSQUIRRELVM vm)
{
  Scripting::DisplayEffect* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'is_black' called without instance"));
    return SQ_ERROR;
  }
  
  try {
    bool return_value = _this->is_black();
  
    sq_pushbool(vm, return_value);
    return 1;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'is_black'"));
    return SQ_ERROR;
  }
  
}

static int DisplayEffect_sixteen_to_nine_wrapper(HSQUIRRELVM vm)
{
  Scripting::DisplayEffect* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'sixteen_to_nine' called without instance"));
    return SQ_ERROR;
  }
  float arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  
  try {
    _this->sixteen_to_nine(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'sixteen_to_nine'"));
    return SQ_ERROR;
  }
  
}

static int DisplayEffect_four_to_three_wrapper(HSQUIRRELVM vm)
{
  Scripting::DisplayEffect* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'four_to_three' called without instance"));
    return SQ_ERROR;
  }
  float arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  
  try {
    _this->four_to_three(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'four_to_three'"));
    return SQ_ERROR;
  }
  
}

static int Camera_release_hook(SQUserPointer ptr, int )
{
  Scripting::Camera* _this = reinterpret_cast<Scripting::Camera*> (ptr);
  delete _this;
  return 0;
}

static int Camera_shake_wrapper(HSQUIRRELVM vm)
{
  Scripting::Camera* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'shake' called without instance"));
    return SQ_ERROR;
  }
  float arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  float arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  float arg2;
  if(SQ_FAILED(sq_getfloat(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not a float"));
    return SQ_ERROR;
  }
  
  try {
    _this->shake(arg0, arg1, arg2);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'shake'"));
    return SQ_ERROR;
  }
  
}

static int Camera_set_pos_wrapper(HSQUIRRELVM vm)
{
  Scripting::Camera* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'set_pos' called without instance"));
    return SQ_ERROR;
  }
  float arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  float arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  
  try {
    _this->set_pos(arg0, arg1);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_pos'"));
    return SQ_ERROR;
  }
  
}

static int Camera_set_mode_wrapper(HSQUIRRELVM vm)
{
  Scripting::Camera* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'set_mode' called without instance"));
    return SQ_ERROR;
  }
  const char* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }
  
  try {
    _this->set_mode(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_mode'"));
    return SQ_ERROR;
  }
  
}

static int Camera_scroll_to_wrapper(HSQUIRRELVM vm)
{
  Scripting::Camera* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'scroll_to' called without instance"));
    return SQ_ERROR;
  }
  float arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  float arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  float arg2;
  if(SQ_FAILED(sq_getfloat(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not a float"));
    return SQ_ERROR;
  }
  
  try {
    _this->scroll_to(arg0, arg1, arg2);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'scroll_to'"));
    return SQ_ERROR;
  }
  
}

static int Level_release_hook(SQUserPointer ptr, int )
{
  Scripting::Level* _this = reinterpret_cast<Scripting::Level*> (ptr);
  delete _this;
  return 0;
}

static int Level_finish_wrapper(HSQUIRRELVM vm)
{
  Scripting::Level* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'finish' called without instance"));
    return SQ_ERROR;
  }
  SQBool arg0;
  if(SQ_FAILED(sq_getbool(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a bool"));
    return SQ_ERROR;
  }
  
  try {
    _this->finish(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'finish'"));
    return SQ_ERROR;
  }
  
}

static int Level_spawn_wrapper(HSQUIRRELVM vm)
{
  Scripting::Level* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'spawn' called without instance"));
    return SQ_ERROR;
  }
  const char* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }
  const char* arg1;
  if(SQ_FAILED(sq_getstring(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a string"));
    return SQ_ERROR;
  }
  
  try {
    _this->spawn(arg0, arg1);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'spawn'"));
    return SQ_ERROR;
  }
  
}

static int Level_flip_vertically_wrapper(HSQUIRRELVM vm)
{
  Scripting::Level* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'flip_vertically' called without instance"));
    return SQ_ERROR;
  }
  
  try {
    _this->flip_vertically();
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'flip_vertically'"));
    return SQ_ERROR;
  }
  
}

static int ScriptedObject_release_hook(SQUserPointer ptr, int )
{
  Scripting::ScriptedObject* _this = reinterpret_cast<Scripting::ScriptedObject*> (ptr);
  delete _this;
  return 0;
}

static int ScriptedObject_set_action_wrapper(HSQUIRRELVM vm)
{
  Scripting::ScriptedObject* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'set_action' called without instance"));
    return SQ_ERROR;
  }
  const char* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }
  
  try {
    _this->set_action(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_action'"));
    return SQ_ERROR;
  }
  
}

static int ScriptedObject_get_action_wrapper(HSQUIRRELVM vm)
{
  Scripting::ScriptedObject* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'get_action' called without instance"));
    return SQ_ERROR;
  }
  
  try {
    std::string return_value = _this->get_action();
  
    sq_pushstring(vm, return_value.c_str(), return_value.size());
    return 1;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_action'"));
    return SQ_ERROR;
  }
  
}

static int ScriptedObject_move_wrapper(HSQUIRRELVM vm)
{
  Scripting::ScriptedObject* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'move' called without instance"));
    return SQ_ERROR;
  }
  float arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  float arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  
  try {
    _this->move(arg0, arg1);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'move'"));
    return SQ_ERROR;
  }
  
}

static int ScriptedObject_set_pos_wrapper(HSQUIRRELVM vm)
{
  Scripting::ScriptedObject* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'set_pos' called without instance"));
    return SQ_ERROR;
  }
  float arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  float arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  
  try {
    _this->set_pos(arg0, arg1);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_pos'"));
    return SQ_ERROR;
  }
  
}

static int ScriptedObject_get_pos_x_wrapper(HSQUIRRELVM vm)
{
  Scripting::ScriptedObject* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'get_pos_x' called without instance"));
    return SQ_ERROR;
  }
  
  try {
    float return_value = _this->get_pos_x();
  
    sq_pushfloat(vm, return_value);
    return 1;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_pos_x'"));
    return SQ_ERROR;
  }
  
}

static int ScriptedObject_get_pos_y_wrapper(HSQUIRRELVM vm)
{
  Scripting::ScriptedObject* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'get_pos_y' called without instance"));
    return SQ_ERROR;
  }
  
  try {
    float return_value = _this->get_pos_y();
  
    sq_pushfloat(vm, return_value);
    return 1;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_pos_y'"));
    return SQ_ERROR;
  }
  
}

static int ScriptedObject_set_velocity_wrapper(HSQUIRRELVM vm)
{
  Scripting::ScriptedObject* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'set_velocity' called without instance"));
    return SQ_ERROR;
  }
  float arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  float arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  
  try {
    _this->set_velocity(arg0, arg1);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_velocity'"));
    return SQ_ERROR;
  }
  
}

static int ScriptedObject_get_velocity_x_wrapper(HSQUIRRELVM vm)
{
  Scripting::ScriptedObject* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'get_velocity_x' called without instance"));
    return SQ_ERROR;
  }
  
  try {
    float return_value = _this->get_velocity_x();
  
    sq_pushfloat(vm, return_value);
    return 1;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_velocity_x'"));
    return SQ_ERROR;
  }
  
}

static int ScriptedObject_get_velocity_y_wrapper(HSQUIRRELVM vm)
{
  Scripting::ScriptedObject* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'get_velocity_y' called without instance"));
    return SQ_ERROR;
  }
  
  try {
    float return_value = _this->get_velocity_y();
  
    sq_pushfloat(vm, return_value);
    return 1;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_velocity_y'"));
    return SQ_ERROR;
  }
  
}

static int ScriptedObject_set_visible_wrapper(HSQUIRRELVM vm)
{
  Scripting::ScriptedObject* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'set_visible' called without instance"));
    return SQ_ERROR;
  }
  SQBool arg0;
  if(SQ_FAILED(sq_getbool(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a bool"));
    return SQ_ERROR;
  }
  
  try {
    _this->set_visible(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_visible'"));
    return SQ_ERROR;
  }
  
}

static int ScriptedObject_is_visible_wrapper(HSQUIRRELVM vm)
{
  Scripting::ScriptedObject* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'is_visible' called without instance"));
    return SQ_ERROR;
  }
  
  try {
    bool return_value = _this->is_visible();
  
    sq_pushbool(vm, return_value);
    return 1;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'is_visible'"));
    return SQ_ERROR;
  }
  
}

static int ScriptedObject_get_name_wrapper(HSQUIRRELVM vm)
{
  Scripting::ScriptedObject* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'get_name' called without instance"));
    return SQ_ERROR;
  }
  
  try {
    std::string return_value = _this->get_name();
  
    sq_pushstring(vm, return_value.c_str(), return_value.size());
    return 1;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_name'"));
    return SQ_ERROR;
  }
  
}

static int Sound_release_hook(SQUserPointer ptr, int )
{
  Scripting::Sound* _this = reinterpret_cast<Scripting::Sound*> (ptr);
  delete _this;
  return 0;
}

static int Sound_play_music_wrapper(HSQUIRRELVM vm)
{
  Scripting::Sound* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'play_music' called without instance"));
    return SQ_ERROR;
  }
  const char* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }
  
  try {
    _this->play_music(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'play_music'"));
    return SQ_ERROR;
  }
  
}

static int Sound_play_wrapper(HSQUIRRELVM vm)
{
  Scripting::Sound* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'play' called without instance"));
    return SQ_ERROR;
  }
  const char* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }
  
  try {
    _this->play(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'play'"));
    return SQ_ERROR;
  }
  
}

static int Text_release_hook(SQUserPointer ptr, int )
{
  Scripting::Text* _this = reinterpret_cast<Scripting::Text*> (ptr);
  delete _this;
  return 0;
}

static int Text_set_text_wrapper(HSQUIRRELVM vm)
{
  Scripting::Text* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'set_text' called without instance"));
    return SQ_ERROR;
  }
  const char* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }
  
  try {
    _this->set_text(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_text'"));
    return SQ_ERROR;
  }
  
}

static int Text_set_font_wrapper(HSQUIRRELVM vm)
{
  Scripting::Text* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'set_font' called without instance"));
    return SQ_ERROR;
  }
  const char* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }
  
  try {
    _this->set_font(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_font'"));
    return SQ_ERROR;
  }
  
}

static int Text_fade_in_wrapper(HSQUIRRELVM vm)
{
  Scripting::Text* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'fade_in' called without instance"));
    return SQ_ERROR;
  }
  float arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  
  try {
    _this->fade_in(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'fade_in'"));
    return SQ_ERROR;
  }
  
}

static int Text_fade_out_wrapper(HSQUIRRELVM vm)
{
  Scripting::Text* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'fade_out' called without instance"));
    return SQ_ERROR;
  }
  float arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  
  try {
    _this->fade_out(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'fade_out'"));
    return SQ_ERROR;
  }
  
}

static int Text_set_visible_wrapper(HSQUIRRELVM vm)
{
  Scripting::Text* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'set_visible' called without instance"));
    return SQ_ERROR;
  }
  SQBool arg0;
  if(SQ_FAILED(sq_getbool(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a bool"));
    return SQ_ERROR;
  }
  
  try {
    _this->set_visible(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_visible'"));
    return SQ_ERROR;
  }
  
}

static int Text_set_centered_wrapper(HSQUIRRELVM vm)
{
  Scripting::Text* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'set_centered' called without instance"));
    return SQ_ERROR;
  }
  SQBool arg0;
  if(SQ_FAILED(sq_getbool(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a bool"));
    return SQ_ERROR;
  }
  
  try {
    _this->set_centered(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_centered'"));
    return SQ_ERROR;
  }
  
}

static int Player_release_hook(SQUserPointer ptr, int )
{
  Scripting::Player* _this = reinterpret_cast<Scripting::Player*> (ptr);
  delete _this;
  return 0;
}

static int Player_set_bonus_wrapper(HSQUIRRELVM vm)
{
  Scripting::Player* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'set_bonus' called without instance"));
    return SQ_ERROR;
  }
  const char* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }
  
  try {
    _this->set_bonus(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_bonus'"));
    return SQ_ERROR;
  }
  
}

static int Player_add_coins_wrapper(HSQUIRRELVM vm)
{
  Scripting::Player* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'add_coins' called without instance"));
    return SQ_ERROR;
  }
  int arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  
  try {
    _this->add_coins(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'add_coins'"));
    return SQ_ERROR;
  }
  
}

static int Player_make_invincible_wrapper(HSQUIRRELVM vm)
{
  Scripting::Player* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'make_invincible' called without instance"));
    return SQ_ERROR;
  }
  
  try {
    _this->make_invincible();
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'make_invincible'"));
    return SQ_ERROR;
  }
  
}

static int Player_deactivate_wrapper(HSQUIRRELVM vm)
{
  Scripting::Player* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'deactivate' called without instance"));
    return SQ_ERROR;
  }
  
  try {
    _this->deactivate();
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'deactivate'"));
    return SQ_ERROR;
  }
  
}

static int Player_activate_wrapper(HSQUIRRELVM vm)
{
  Scripting::Player* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'activate' called without instance"));
    return SQ_ERROR;
  }
  
  try {
    _this->activate();
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'activate'"));
    return SQ_ERROR;
  }
  
}

static int Player_walk_wrapper(HSQUIRRELVM vm)
{
  Scripting::Player* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'walk' called without instance"));
    return SQ_ERROR;
  }
  float arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  
  try {
    _this->walk(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'walk'"));
    return SQ_ERROR;
  }
  
}

static int Player_set_visible_wrapper(HSQUIRRELVM vm)
{
  Scripting::Player* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'set_visible' called without instance"));
    return SQ_ERROR;
  }
  SQBool arg0;
  if(SQ_FAILED(sq_getbool(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a bool"));
    return SQ_ERROR;
  }
  
  try {
    _this->set_visible(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_visible'"));
    return SQ_ERROR;
  }
  
}

static int Player_get_visible_wrapper(HSQUIRRELVM vm)
{
  Scripting::Player* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'get_visible' called without instance"));
    return SQ_ERROR;
  }
  
  try {
    bool return_value = _this->get_visible();
  
    sq_pushbool(vm, return_value);
    return 1;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_visible'"));
    return SQ_ERROR;
  }
  
}

static int FloatingImage_release_hook(SQUserPointer ptr, int )
{
  Scripting::FloatingImage* _this = reinterpret_cast<Scripting::FloatingImage*> (ptr);
  delete _this;
  return 0;
}

static int FloatingImage_constructor_wrapper(HSQUIRRELVM vm)
{
  const char* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }
  
  try {
    Scripting::FloatingImage* _this = new Scripting::FloatingImage(arg0);
  if(SQ_FAILED(sq_setinstanceup(vm, 1, _this))) {
    sq_throwerror(vm, _SC("Couldn't setup instance of 'FloatingImage' class"));
    return SQ_ERROR;
  }
  sq_setreleasehook(vm, 1, FloatingImage_release_hook);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'constructor'"));
    return SQ_ERROR;
  }
  
}

static int FloatingImage_set_layer_wrapper(HSQUIRRELVM vm)
{
  Scripting::FloatingImage* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'set_layer' called without instance"));
    return SQ_ERROR;
  }
  int arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  
  try {
    _this->set_layer(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_layer'"));
    return SQ_ERROR;
  }
  
}

static int FloatingImage_get_layer_wrapper(HSQUIRRELVM vm)
{
  Scripting::FloatingImage* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'get_layer' called without instance"));
    return SQ_ERROR;
  }
  
  try {
    int return_value = _this->get_layer();
  
    sq_pushinteger(vm, return_value);
    return 1;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_layer'"));
    return SQ_ERROR;
  }
  
}

static int FloatingImage_set_pos_wrapper(HSQUIRRELVM vm)
{
  Scripting::FloatingImage* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'set_pos' called without instance"));
    return SQ_ERROR;
  }
  float arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  float arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  
  try {
    _this->set_pos(arg0, arg1);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_pos'"));
    return SQ_ERROR;
  }
  
}

static int FloatingImage_get_pos_x_wrapper(HSQUIRRELVM vm)
{
  Scripting::FloatingImage* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'get_pos_x' called without instance"));
    return SQ_ERROR;
  }
  
  try {
    float return_value = _this->get_pos_x();
  
    sq_pushfloat(vm, return_value);
    return 1;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_pos_x'"));
    return SQ_ERROR;
  }
  
}

static int FloatingImage_get_pos_y_wrapper(HSQUIRRELVM vm)
{
  Scripting::FloatingImage* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'get_pos_y' called without instance"));
    return SQ_ERROR;
  }
  
  try {
    float return_value = _this->get_pos_y();
  
    sq_pushfloat(vm, return_value);
    return 1;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_pos_y'"));
    return SQ_ERROR;
  }
  
}

static int FloatingImage_set_anchor_point_wrapper(HSQUIRRELVM vm)
{
  Scripting::FloatingImage* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'set_anchor_point' called without instance"));
    return SQ_ERROR;
  }
  int arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  
  try {
    _this->set_anchor_point(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_anchor_point'"));
    return SQ_ERROR;
  }
  
}

static int FloatingImage_get_anchor_point_wrapper(HSQUIRRELVM vm)
{
  Scripting::FloatingImage* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'get_anchor_point' called without instance"));
    return SQ_ERROR;
  }
  
  try {
    int return_value = _this->get_anchor_point();
  
    sq_pushinteger(vm, return_value);
    return 1;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_anchor_point'"));
    return SQ_ERROR;
  }
  
}

static int FloatingImage_set_visible_wrapper(HSQUIRRELVM vm)
{
  Scripting::FloatingImage* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'set_visible' called without instance"));
    return SQ_ERROR;
  }
  SQBool arg0;
  if(SQ_FAILED(sq_getbool(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a bool"));
    return SQ_ERROR;
  }
  
  try {
    _this->set_visible(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_visible'"));
    return SQ_ERROR;
  }
  
}

static int FloatingImage_get_visible_wrapper(HSQUIRRELVM vm)
{
  Scripting::FloatingImage* _this;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, reinterpret_cast<SQUserPointer*> (&_this), 0))) {
    sq_throwerror(vm, _SC("'get_visible' called without instance"));
    return SQ_ERROR;
  }
  
  try {
    bool return_value = _this->get_visible();
  
    sq_pushbool(vm, return_value);
    return 1;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_visible'"));
    return SQ_ERROR;
  }
  
}

static int display_wrapper(HSQUIRRELVM vm)
{
  return Scripting::display(vm);
}

static int display_text_file_wrapper(HSQUIRRELVM vm)
{
  const char* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }
  
  try {
    Scripting::display_text_file(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'display_text_file'"));
    return SQ_ERROR;
  }
  
}

static int load_worldmap_wrapper(HSQUIRRELVM vm)
{
  const char* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }
  
  try {
    Scripting::load_worldmap(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'load_worldmap'"));
    return SQ_ERROR;
  }
  
}

static int load_level_wrapper(HSQUIRRELVM vm)
{
  const char* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }
  
  try {
    Scripting::load_level(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'load_level'"));
    return SQ_ERROR;
  }
  
}

static int wait_wrapper(HSQUIRRELVM vm)
{
  HSQUIRRELVM arg0 = vm;
  float arg1;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg1))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  
  try {
    Scripting::wait(arg0, arg1);
  
    return sq_suspendvm(vm);
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'wait'"));
    return SQ_ERROR;
  }
  
}

static int wait_for_screenswitch_wrapper(HSQUIRRELVM vm)
{
  HSQUIRRELVM arg0 = vm;
  
  try {
    Scripting::wait_for_screenswitch(arg0);
  
    return sq_suspendvm(vm);
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'wait_for_screenswitch'"));
    return SQ_ERROR;
  }
  
}

static int exit_screen_wrapper(HSQUIRRELVM vm)
{
  (void) vm;
  
  try {
    Scripting::exit_screen();
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'exit_screen'"));
    return SQ_ERROR;
  }
  
}

static int translate_wrapper(HSQUIRRELVM vm)
{
  const char* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }
  
  try {
    std::string return_value = Scripting::translate(arg0);
  
    sq_pushstring(vm, return_value.c_str(), return_value.size());
    return 1;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'translate'"));
    return SQ_ERROR;
  }
  
}

static int import_wrapper(HSQUIRRELVM vm)
{
  HSQUIRRELVM arg0 = vm;
  const char* arg1;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg1))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }
  
  try {
    Scripting::import(arg0, arg1);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'import'"));
    return SQ_ERROR;
  }
  
}

static int save_state_wrapper(HSQUIRRELVM vm)
{
  (void) vm;
  
  try {
    Scripting::save_state();
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'save_state'"));
    return SQ_ERROR;
  }
  
}

static int add_key_wrapper(HSQUIRRELVM vm)
{
  int arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  
  try {
    Scripting::add_key(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'add_key'"));
    return SQ_ERROR;
  }
  
}

static int debug_collrects_wrapper(HSQUIRRELVM vm)
{
  SQBool arg0;
  if(SQ_FAILED(sq_getbool(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a bool"));
    return SQ_ERROR;
  }
  
  try {
    Scripting::debug_collrects(arg0);
  
    return 0;
  
  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'debug_collrects'"));
    return SQ_ERROR;
  }
  
}

} // end of namespace Wrapper

void create_squirrel_instance(HSQUIRRELVM v, Scripting::DisplayEffect* object, bool setup_releasehook)
{
  using namespace Wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "DisplayEffect", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'DisplayEffect'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'DisplayEffect'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, DisplayEffect_release_hook);
  }

  sq_remove(v, -2); // remove root table
}

void create_squirrel_instance(HSQUIRRELVM v, Scripting::Camera* object, bool setup_releasehook)
{
  using namespace Wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "Camera", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'Camera'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'Camera'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, Camera_release_hook);
  }

  sq_remove(v, -2); // remove root table
}

void create_squirrel_instance(HSQUIRRELVM v, Scripting::Level* object, bool setup_releasehook)
{
  using namespace Wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "Level", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'Level'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'Level'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, Level_release_hook);
  }

  sq_remove(v, -2); // remove root table
}

void create_squirrel_instance(HSQUIRRELVM v, Scripting::ScriptedObject* object, bool setup_releasehook)
{
  using namespace Wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "ScriptedObject", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'ScriptedObject'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'ScriptedObject'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, ScriptedObject_release_hook);
  }

  sq_remove(v, -2); // remove root table
}

void create_squirrel_instance(HSQUIRRELVM v, Scripting::Sound* object, bool setup_releasehook)
{
  using namespace Wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "Sound", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'Sound'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'Sound'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, Sound_release_hook);
  }

  sq_remove(v, -2); // remove root table
}

void create_squirrel_instance(HSQUIRRELVM v, Scripting::Text* object, bool setup_releasehook)
{
  using namespace Wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "Text", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'Text'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'Text'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, Text_release_hook);
  }

  sq_remove(v, -2); // remove root table
}

void create_squirrel_instance(HSQUIRRELVM v, Scripting::Player* object, bool setup_releasehook)
{
  using namespace Wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "Player", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'Player'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'Player'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, Player_release_hook);
  }

  sq_remove(v, -2); // remove root table
}

void create_squirrel_instance(HSQUIRRELVM v, Scripting::FloatingImage* object, bool setup_releasehook)
{
  using namespace Wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "FloatingImage", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'FloatingImage'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'FloatingImage'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, FloatingImage_release_hook);
  }

  sq_remove(v, -2); // remove root table
}

void register_supertux_wrapper(HSQUIRRELVM v)
{
  using namespace Wrapper;

  sq_pushstring(v, "KEY_BRASS", -1);
  sq_pushinteger(v, 1);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'KEY_BRASS'");
  }

  sq_pushstring(v, "KEY_IRON", -1);
  sq_pushinteger(v, 2);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'KEY_IRON'");
  }

  sq_pushstring(v, "KEY_BRONZE", -1);
  sq_pushinteger(v, 4);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'KEY_BRONZE'");
  }

  sq_pushstring(v, "KEY_SILVER", -1);
  sq_pushinteger(v, 8);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'KEY_SILVER'");
  }

  sq_pushstring(v, "KEY_GOLD", -1);
  sq_pushinteger(v, 16);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'KEY_GOLD'");
  }

  sq_pushstring(v, "ANCHOR_TOP", -1);
  sq_pushinteger(v, 16);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'ANCHOR_TOP'");
  }

  sq_pushstring(v, "ANCHOR_BOTTOM", -1);
  sq_pushinteger(v, 32);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'ANCHOR_BOTTOM'");
  }

  sq_pushstring(v, "ANCHOR_LEFT", -1);
  sq_pushinteger(v, 1);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'ANCHOR_LEFT'");
  }

  sq_pushstring(v, "ANCHOR_RIGHT", -1);
  sq_pushinteger(v, 2);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'ANCHOR_RIGHT'");
  }

  sq_pushstring(v, "ANCHOR_MIDDLE", -1);
  sq_pushinteger(v, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'ANCHOR_MIDDLE'");
  }

  sq_pushstring(v, "ANCHOR_TOP_LEFT", -1);
  sq_pushinteger(v, 17);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'ANCHOR_TOP_LEFT'");
  }

  sq_pushstring(v, "ANCHOR_TOP_RIGHT", -1);
  sq_pushinteger(v, 18);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'ANCHOR_TOP_RIGHT'");
  }

  sq_pushstring(v, "ANCHOR_BOTTOM_LEFT", -1);
  sq_pushinteger(v, 33);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'ANCHOR_BOTTOM_LEFT'");
  }

  sq_pushstring(v, "ANCHOR_BOTTOM_RIGHT", -1);
  sq_pushinteger(v, 34);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'ANCHOR_BOTTOM_RIGHT'");
  }

  sq_pushstring(v, "display", -1);
  sq_newclosure(v, &display_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'display'");
  }

  sq_pushstring(v, "display_text_file", -1);
  sq_newclosure(v, &display_text_file_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'display_text_file'");
  }

  sq_pushstring(v, "load_worldmap", -1);
  sq_newclosure(v, &load_worldmap_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'load_worldmap'");
  }

  sq_pushstring(v, "load_level", -1);
  sq_newclosure(v, &load_level_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'load_level'");
  }

  sq_pushstring(v, "wait", -1);
  sq_newclosure(v, &wait_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'wait'");
  }

  sq_pushstring(v, "wait_for_screenswitch", -1);
  sq_newclosure(v, &wait_for_screenswitch_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'wait_for_screenswitch'");
  }

  sq_pushstring(v, "exit_screen", -1);
  sq_newclosure(v, &exit_screen_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'exit_screen'");
  }

  sq_pushstring(v, "translate", -1);
  sq_newclosure(v, &translate_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'translate'");
  }

  sq_pushstring(v, "import", -1);
  sq_newclosure(v, &import_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'import'");
  }

  sq_pushstring(v, "save_state", -1);
  sq_newclosure(v, &save_state_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'save_state'");
  }

  sq_pushstring(v, "add_key", -1);
  sq_newclosure(v, &add_key_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'add_key'");
  }

  sq_pushstring(v, "debug_collrects", -1);
  sq_newclosure(v, &debug_collrects_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'debug_collrects'");
  }

  // Register class DisplayEffect
  sq_pushstring(v, "DisplayEffect", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'DisplayEffect'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "fade_out", -1);
  sq_newclosure(v, &DisplayEffect_fade_out_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'fade_out'");
  }

  sq_pushstring(v, "fade_in", -1);
  sq_newclosure(v, &DisplayEffect_fade_in_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'fade_in'");
  }

  sq_pushstring(v, "set_black", -1);
  sq_newclosure(v, &DisplayEffect_set_black_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_black'");
  }

  sq_pushstring(v, "is_black", -1);
  sq_newclosure(v, &DisplayEffect_is_black_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'is_black'");
  }

  sq_pushstring(v, "sixteen_to_nine", -1);
  sq_newclosure(v, &DisplayEffect_sixteen_to_nine_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'sixteen_to_nine'");
  }

  sq_pushstring(v, "four_to_three", -1);
  sq_newclosure(v, &DisplayEffect_four_to_three_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'four_to_three'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'DisplayEffect'");
  }

  // Register class Camera
  sq_pushstring(v, "Camera", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'Camera'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "shake", -1);
  sq_newclosure(v, &Camera_shake_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'shake'");
  }

  sq_pushstring(v, "set_pos", -1);
  sq_newclosure(v, &Camera_set_pos_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_pos'");
  }

  sq_pushstring(v, "set_mode", -1);
  sq_newclosure(v, &Camera_set_mode_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_mode'");
  }

  sq_pushstring(v, "scroll_to", -1);
  sq_newclosure(v, &Camera_scroll_to_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'scroll_to'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'Camera'");
  }

  // Register class Level
  sq_pushstring(v, "Level", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'Level'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "finish", -1);
  sq_newclosure(v, &Level_finish_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'finish'");
  }

  sq_pushstring(v, "spawn", -1);
  sq_newclosure(v, &Level_spawn_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'spawn'");
  }

  sq_pushstring(v, "flip_vertically", -1);
  sq_newclosure(v, &Level_flip_vertically_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'flip_vertically'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'Level'");
  }

  // Register class ScriptedObject
  sq_pushstring(v, "ScriptedObject", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'ScriptedObject'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "set_action", -1);
  sq_newclosure(v, &ScriptedObject_set_action_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_action'");
  }

  sq_pushstring(v, "get_action", -1);
  sq_newclosure(v, &ScriptedObject_get_action_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_action'");
  }

  sq_pushstring(v, "move", -1);
  sq_newclosure(v, &ScriptedObject_move_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'move'");
  }

  sq_pushstring(v, "set_pos", -1);
  sq_newclosure(v, &ScriptedObject_set_pos_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_pos'");
  }

  sq_pushstring(v, "get_pos_x", -1);
  sq_newclosure(v, &ScriptedObject_get_pos_x_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_pos_x'");
  }

  sq_pushstring(v, "get_pos_y", -1);
  sq_newclosure(v, &ScriptedObject_get_pos_y_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_pos_y'");
  }

  sq_pushstring(v, "set_velocity", -1);
  sq_newclosure(v, &ScriptedObject_set_velocity_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_velocity'");
  }

  sq_pushstring(v, "get_velocity_x", -1);
  sq_newclosure(v, &ScriptedObject_get_velocity_x_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_velocity_x'");
  }

  sq_pushstring(v, "get_velocity_y", -1);
  sq_newclosure(v, &ScriptedObject_get_velocity_y_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_velocity_y'");
  }

  sq_pushstring(v, "set_visible", -1);
  sq_newclosure(v, &ScriptedObject_set_visible_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_visible'");
  }

  sq_pushstring(v, "is_visible", -1);
  sq_newclosure(v, &ScriptedObject_is_visible_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'is_visible'");
  }

  sq_pushstring(v, "get_name", -1);
  sq_newclosure(v, &ScriptedObject_get_name_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_name'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'ScriptedObject'");
  }

  // Register class Sound
  sq_pushstring(v, "Sound", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'Sound'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "play_music", -1);
  sq_newclosure(v, &Sound_play_music_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'play_music'");
  }

  sq_pushstring(v, "play", -1);
  sq_newclosure(v, &Sound_play_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'play'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'Sound'");
  }

  // Register class Text
  sq_pushstring(v, "Text", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'Text'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "set_text", -1);
  sq_newclosure(v, &Text_set_text_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_text'");
  }

  sq_pushstring(v, "set_font", -1);
  sq_newclosure(v, &Text_set_font_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_font'");
  }

  sq_pushstring(v, "fade_in", -1);
  sq_newclosure(v, &Text_fade_in_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'fade_in'");
  }

  sq_pushstring(v, "fade_out", -1);
  sq_newclosure(v, &Text_fade_out_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'fade_out'");
  }

  sq_pushstring(v, "set_visible", -1);
  sq_newclosure(v, &Text_set_visible_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_visible'");
  }

  sq_pushstring(v, "set_centered", -1);
  sq_newclosure(v, &Text_set_centered_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_centered'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'Text'");
  }

  // Register class Player
  sq_pushstring(v, "Player", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'Player'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "set_bonus", -1);
  sq_newclosure(v, &Player_set_bonus_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_bonus'");
  }

  sq_pushstring(v, "add_coins", -1);
  sq_newclosure(v, &Player_add_coins_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'add_coins'");
  }

  sq_pushstring(v, "make_invincible", -1);
  sq_newclosure(v, &Player_make_invincible_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'make_invincible'");
  }

  sq_pushstring(v, "deactivate", -1);
  sq_newclosure(v, &Player_deactivate_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'deactivate'");
  }

  sq_pushstring(v, "activate", -1);
  sq_newclosure(v, &Player_activate_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'activate'");
  }

  sq_pushstring(v, "walk", -1);
  sq_newclosure(v, &Player_walk_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'walk'");
  }

  sq_pushstring(v, "set_visible", -1);
  sq_newclosure(v, &Player_set_visible_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_visible'");
  }

  sq_pushstring(v, "get_visible", -1);
  sq_newclosure(v, &Player_get_visible_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_visible'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'Player'");
  }

  // Register class FloatingImage
  sq_pushstring(v, "FloatingImage", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'FloatingImage'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "constructor", -1);
  sq_newclosure(v, &FloatingImage_constructor_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'constructor'");
  }

  sq_pushstring(v, "set_layer", -1);
  sq_newclosure(v, &FloatingImage_set_layer_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_layer'");
  }

  sq_pushstring(v, "get_layer", -1);
  sq_newclosure(v, &FloatingImage_get_layer_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_layer'");
  }

  sq_pushstring(v, "set_pos", -1);
  sq_newclosure(v, &FloatingImage_set_pos_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_pos'");
  }

  sq_pushstring(v, "get_pos_x", -1);
  sq_newclosure(v, &FloatingImage_get_pos_x_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_pos_x'");
  }

  sq_pushstring(v, "get_pos_y", -1);
  sq_newclosure(v, &FloatingImage_get_pos_y_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_pos_y'");
  }

  sq_pushstring(v, "set_anchor_point", -1);
  sq_newclosure(v, &FloatingImage_set_anchor_point_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_anchor_point'");
  }

  sq_pushstring(v, "get_anchor_point", -1);
  sq_newclosure(v, &FloatingImage_get_anchor_point_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_anchor_point'");
  }

  sq_pushstring(v, "set_visible", -1);
  sq_newclosure(v, &FloatingImage_set_visible_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_visible'");
  }

  sq_pushstring(v, "get_visible", -1);
  sq_newclosure(v, &FloatingImage_get_visible_wrapper, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_visible'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'FloatingImage'");
  }

}

} // end of namespace Scripting

