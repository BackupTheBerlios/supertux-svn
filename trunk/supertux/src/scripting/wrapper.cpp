/**
 * WARNING: This file is automatically generated from './build/i686-pc-linux-gnu/debug/miniswig.tmp' - do not change
 */

#include <new>
#include <string>
#include <squirrel.h>
#include <assert.h>
#include "wrapper_util.h"
#include "wrapper.interface.h"

using namespace Scripting;

static int Display_release_wrapper(SQUserPointer ptr, int )
{
  Display* _this = reinterpret_cast<Display*> (ptr);
  delete _this;
  return 0;
}

static int Display_construct_wrapper(HSQUIRRELVM v)
{
  Display* _this = new Display();
  sq_setinstanceup(v, 1, _this);
  sq_setreleasehook(v, 1, Display_release_wrapper);

  return 0;
}

static int Display_set_effect_wrapper(HSQUIRRELVM v)
{
  Display* _this;
  sq_getinstanceup(v, 1, (SQUserPointer*) &_this, 0);
  assert(_this != 0);
  const char* arg0;
  sq_getstring(v, 2, &arg0);
  
  _this->set_effect(arg0);
  
  return 0;
}

static int Camera_release_wrapper(SQUserPointer ptr, int )
{
  Camera* _this = reinterpret_cast<Camera*> (ptr);
  delete _this;
  return 0;
}

static int Camera_construct_wrapper(HSQUIRRELVM v)
{
  Camera* _this = new Camera();
  sq_setinstanceup(v, 1, _this);
  sq_setreleasehook(v, 1, Camera_release_wrapper);

  return 0;
}

static int Camera_shake_wrapper(HSQUIRRELVM v)
{
  Camera* _this;
  sq_getinstanceup(v, 1, (SQUserPointer*) &_this, 0);
  assert(_this != 0);
  float arg0;
  sq_getfloat(v, 2, &arg0);
  float arg1;
  sq_getfloat(v, 3, &arg1);
  float arg2;
  sq_getfloat(v, 4, &arg2);
  
  _this->shake(arg0, arg1, arg2);
  
  return 0;
}

static int Camera_set_pos_wrapper(HSQUIRRELVM v)
{
  Camera* _this;
  sq_getinstanceup(v, 1, (SQUserPointer*) &_this, 0);
  assert(_this != 0);
  float arg0;
  sq_getfloat(v, 2, &arg0);
  float arg1;
  sq_getfloat(v, 3, &arg1);
  
  _this->set_pos(arg0, arg1);
  
  return 0;
}

static int Camera_set_mode_wrapper(HSQUIRRELVM v)
{
  Camera* _this;
  sq_getinstanceup(v, 1, (SQUserPointer*) &_this, 0);
  assert(_this != 0);
  const char* arg0;
  sq_getstring(v, 2, &arg0);
  
  _this->set_mode(arg0);
  
  return 0;
}

static int Level_release_wrapper(SQUserPointer ptr, int )
{
  Level* _this = reinterpret_cast<Level*> (ptr);
  delete _this;
  return 0;
}

static int Level_construct_wrapper(HSQUIRRELVM v)
{
  Level* _this = new Level();
  sq_setinstanceup(v, 1, _this);
  sq_setreleasehook(v, 1, Level_release_wrapper);

  return 0;
}

static int Level_finish_wrapper(HSQUIRRELVM v)
{
  Level* _this;
  sq_getinstanceup(v, 1, (SQUserPointer*) &_this, 0);
  assert(_this != 0);
  
  _this->finish();
  
  return 0;
}

static int Level_spawn_wrapper(HSQUIRRELVM v)
{
  Level* _this;
  sq_getinstanceup(v, 1, (SQUserPointer*) &_this, 0);
  assert(_this != 0);
  const char* arg0;
  sq_getstring(v, 2, &arg0);
  const char* arg1;
  sq_getstring(v, 3, &arg1);
  
  _this->spawn(arg0, arg1);
  
  return 0;
}

static int ScriptedObject_release_wrapper(SQUserPointer ptr, int )
{
  ScriptedObject* _this = reinterpret_cast<ScriptedObject*> (ptr);
  delete _this;
  return 0;
}

static int ScriptedObject_construct_wrapper(HSQUIRRELVM v)
{
  ScriptedObject* _this = new ScriptedObject();
  sq_setinstanceup(v, 1, _this);
  sq_setreleasehook(v, 1, ScriptedObject_release_wrapper);

  return 0;
}

static int ScriptedObject_set_animation_wrapper(HSQUIRRELVM v)
{
  ScriptedObject* _this;
  sq_getinstanceup(v, 1, (SQUserPointer*) &_this, 0);
  assert(_this != 0);
  const char* arg0;
  sq_getstring(v, 2, &arg0);
  
  _this->set_animation(arg0);
  
  return 0;
}

static int ScriptedObject_get_animation_wrapper(HSQUIRRELVM v)
{
  ScriptedObject* _this;
  sq_getinstanceup(v, 1, (SQUserPointer*) &_this, 0);
  assert(_this != 0);
  
  std::string return_value = _this->get_animation();
  
  sq_pushstring(v, return_value.c_str(), return_value.size());
  return 1;
}

static int ScriptedObject_move_wrapper(HSQUIRRELVM v)
{
  ScriptedObject* _this;
  sq_getinstanceup(v, 1, (SQUserPointer*) &_this, 0);
  assert(_this != 0);
  float arg0;
  sq_getfloat(v, 2, &arg0);
  float arg1;
  sq_getfloat(v, 3, &arg1);
  
  _this->move(arg0, arg1);
  
  return 0;
}

static int ScriptedObject_set_pos_wrapper(HSQUIRRELVM v)
{
  ScriptedObject* _this;
  sq_getinstanceup(v, 1, (SQUserPointer*) &_this, 0);
  assert(_this != 0);
  float arg0;
  sq_getfloat(v, 2, &arg0);
  float arg1;
  sq_getfloat(v, 3, &arg1);
  
  _this->set_pos(arg0, arg1);
  
  return 0;
}

static int ScriptedObject_get_pos_x_wrapper(HSQUIRRELVM v)
{
  ScriptedObject* _this;
  sq_getinstanceup(v, 1, (SQUserPointer*) &_this, 0);
  assert(_this != 0);
  
  float return_value = _this->get_pos_x();
  
  sq_pushfloat(v, return_value);
  return 1;
}

static int ScriptedObject_get_pos_y_wrapper(HSQUIRRELVM v)
{
  ScriptedObject* _this;
  sq_getinstanceup(v, 1, (SQUserPointer*) &_this, 0);
  assert(_this != 0);
  
  float return_value = _this->get_pos_y();
  
  sq_pushfloat(v, return_value);
  return 1;
}

static int ScriptedObject_set_velocity_wrapper(HSQUIRRELVM v)
{
  ScriptedObject* _this;
  sq_getinstanceup(v, 1, (SQUserPointer*) &_this, 0);
  assert(_this != 0);
  float arg0;
  sq_getfloat(v, 2, &arg0);
  float arg1;
  sq_getfloat(v, 3, &arg1);
  
  _this->set_velocity(arg0, arg1);
  
  return 0;
}

static int ScriptedObject_get_velocity_x_wrapper(HSQUIRRELVM v)
{
  ScriptedObject* _this;
  sq_getinstanceup(v, 1, (SQUserPointer*) &_this, 0);
  assert(_this != 0);
  
  float return_value = _this->get_velocity_x();
  
  sq_pushfloat(v, return_value);
  return 1;
}

static int ScriptedObject_get_velocity_y_wrapper(HSQUIRRELVM v)
{
  ScriptedObject* _this;
  sq_getinstanceup(v, 1, (SQUserPointer*) &_this, 0);
  assert(_this != 0);
  
  float return_value = _this->get_velocity_y();
  
  sq_pushfloat(v, return_value);
  return 1;
}

static int Sound_release_wrapper(SQUserPointer ptr, int )
{
  Sound* _this = reinterpret_cast<Sound*> (ptr);
  delete _this;
  return 0;
}

static int Sound_construct_wrapper(HSQUIRRELVM v)
{
  Sound* _this = new Sound();
  sq_setinstanceup(v, 1, _this);
  sq_setreleasehook(v, 1, Sound_release_wrapper);

  return 0;
}

static int Sound_play_music_wrapper(HSQUIRRELVM v)
{
  Sound* _this;
  sq_getinstanceup(v, 1, (SQUserPointer*) &_this, 0);
  assert(_this != 0);
  const char* arg0;
  sq_getstring(v, 2, &arg0);
  
  _this->play_music(arg0);
  
  return 0;
}

static int Sound_play_sound_wrapper(HSQUIRRELVM v)
{
  Sound* _this;
  sq_getinstanceup(v, 1, (SQUserPointer*) &_this, 0);
  assert(_this != 0);
  const char* arg0;
  sq_getstring(v, 2, &arg0);
  
  _this->play_sound(arg0);
  
  return 0;
}

static int wait_wrapper(HSQUIRRELVM v)
{
  float arg0;
  sq_getfloat(v, 2, &arg0);
  
  Scripting::wait(arg0);
  
  return 0;
}

WrappedFunction supertux_global_functions[] = {
  { "wait", &wait_wrapper },
  { 0, 0 }
};

static WrappedFunction supertux_Display_methods[] = {
  { "constructor", &Display_construct_wrapper },
  { "set_effect", &Display_set_effect_wrapper },
};

static WrappedFunction supertux_Camera_methods[] = {
  { "constructor", &Camera_construct_wrapper },
  { "shake", &Camera_shake_wrapper },
  { "set_pos", &Camera_set_pos_wrapper },
  { "set_mode", &Camera_set_mode_wrapper },
};

static WrappedFunction supertux_Level_methods[] = {
  { "constructor", &Level_construct_wrapper },
  { "finish", &Level_finish_wrapper },
  { "spawn", &Level_spawn_wrapper },
};

static WrappedFunction supertux_ScriptedObject_methods[] = {
  { "constructor", &ScriptedObject_construct_wrapper },
  { "set_animation", &ScriptedObject_set_animation_wrapper },
  { "get_animation", &ScriptedObject_get_animation_wrapper },
  { "move", &ScriptedObject_move_wrapper },
  { "set_pos", &ScriptedObject_set_pos_wrapper },
  { "get_pos_x", &ScriptedObject_get_pos_x_wrapper },
  { "get_pos_y", &ScriptedObject_get_pos_y_wrapper },
  { "set_velocity", &ScriptedObject_set_velocity_wrapper },
  { "get_velocity_x", &ScriptedObject_get_velocity_x_wrapper },
  { "get_velocity_y", &ScriptedObject_get_velocity_y_wrapper },
};

static WrappedFunction supertux_Sound_methods[] = {
  { "constructor", &Sound_construct_wrapper },
  { "play_music", &Sound_play_music_wrapper },
  { "play_sound", &Sound_play_sound_wrapper },
};

WrappedClass supertux_classes[] = {
  { "Display", supertux_Display_methods },
  { "Camera", supertux_Camera_methods },
  { "Level", supertux_Level_methods },
  { "ScriptedObject", supertux_ScriptedObject_methods },
  { "Sound", supertux_Sound_methods },
  { 0, 0 }
};

