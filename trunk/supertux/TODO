                                TODO

Milestone 2
~~~~~~~~~~~
Documents and ideas: http://super-tux.sourceforge.net/milestone2
Wiki: http://netpanzer.berlios.de/supertux
        esp. http://netpanzer.berlios.de/supertux/index.php/Forest


Notes
~~~~~
High priority [H]:   milestone goals that should be implemented for next
                     milestone
Medium priority [M]: would be nice to have for next milestone, but should
                     be secondary to high priority goals
Low priority [L]:    things that should be fixed sometime
?: Things that need to be discussed to determine whether or not they should be
    implemented


Programming
~~~~~~~~~~~
--Collision Detection Rewrite (all [H])--
 * enemies:
    - implement fish
    - implement wingling
    - implement stalactite
    - implement tree (really?)
    - bring back stay on platform flag
 ** implement ability to cary mriceblock (and other objects) around
 * smoke clouds are too fast
 * rethink slopes collision feedback... tux becomes too slow when walking up
    and starts jumping when walking down
 * think about an attachement mechanism for moving platforms
 * implement paths for the moving platform, implement simple moving platforms
 * fix bullet speed/behaviour
 * check if unducking is actually possible or if something is in the way
 * fix flapping
 * what to do when stuck under tiles (after using duck-sliding)
    - just slide through?
 * do we want multi hit scores again? - not in the form of scores
 * buttjump is deactivated
 * implement quadtree or grid to speedup collision detection

--Code Refactoring/Cleanup/Optimisation--
[H] make the title using GameSession instead of reimplementing all the stuff
[L] rename gameloop.* files to gamesession.*
[L] rename GameObject::action to GameObject::update()
[L] use physfs for loading files
[L] change physics class y-velocity-coordinate to be like all other
    y-coordinates again (positive y to go down)
[L] rename files like tile_manage.* to TileManager.* because they contain a
    class named TileManager not tile_manager. Eventually use .hpp instead of .h
    to indicate the usage of c++
[M] harmonize to 1 single gameloop that switches between title, worldmap,
    ingame mode and eventually leveleditor mode
[L] introduce a special mode in DrawingContext for objects that want to draw
    themselfes. This could speed up rendering of tilemaps.
[M] Make the gamelogic run in a fixed logical framerate

--Objects--
[H] Create a "sound object" that is an object or area, that can be placed on the
    map and constantly plays a .wav file to improve game athmosphere.
    Good examples would be a water sound which can be placed at waterfalls,
    a kuckoo sound that can be placed into the wood, bubling sound for lava,
    ...
    The sound object should be configurable:
        To be position independent (always play), to have a spot position so
        that it gets louder when tux gets nearer to the spot (or a rectangular
        area instead of the spot?). You should be able to configure the sound
        to be constantly looped or to be played in some random fashion
        (ie. play and then 5-10 seconds pause).
[H] Create a "sign" object, ie an object that can be placed on the level and
    contains messages (like the run sign we have at the moment but
    programmatically created so that we can translate it)
[H] Create an "info block" ie. a block with a lightbulb on it or so that
    displays some info text when jumped against. The textbox should be done
    indepently of the info block and could be reused in cutscenes later...
[H] Add a simple rock object that can be carried around
[H] Add a rope object on which tux is able to climb, also add a ? block that
    emits a rope when hit
[H] redo trampolines

--Miscellaneous--
[?] think about how to implement scripting, and how to make a simple and easy to
  use api for the scripting interface
  (language will probably be lua - just have to figure out how well we can do
   without OO support in the scripting language.
   Other candidates are python, ruby and less likely java, mono/.net,
   surely no own invention, perl or 1 of these c-like scripting languages)
[H] Buttjump related things
     - enable buttjump again
     - Should kill enemies with a certain range
        - Done--now needs to be tweaked
     - Animation (need images)
     - Should be a powerup item (still to be discussed)
     - Should break bricks if Tux is on top of bricks, otherwise it should
       kill enemies within a close range.
        - After enemy-kill is used, powerup should be removed from Tux
[H] Icebullet related things
     - we should decide on specifics
[H] Graphics
     - New forest tileset
     - Badguy sprites
     - Tux's buttjump animation
[M] Save score on per-level basis to make high-score
[M] Save time on per-level basis to make low-time-score
[M] Add bonus score for extra time left when finishing a level
[M] when bumping a special with 2 blocks at once, it won't change direction
[M] tux get killed if he kicks a iceblock while at the same time bouncing on
[L] The camera does some nasty little jumps if you jumped up on a higher place
    where the camera didn't completely follow yet and you fall down directly
    again. This will suddenly raise the camera up.
[L] Allow any object to be inside of a [?] box, ie. trampoline or badguy
[L] There is a report that the joypad is always used on windows and more severe
    it generates random up/down events, though it is callibrated correctly.

Graphics
~~~~~~~~

[H] Graphics+Animations for the Yeti
        (see also http://netpanzer.berlios.de/supertux/index.php/Yeti)
[H] Graphics for the 5 keys in the forest world, graphics for the castle door
    with 5 key holes
[H] New tiles for the forest worldmap
[H] Create a graphics to visually present reset points. (Maybe a bell that
    starts swinging once tux touched it?)
[M] Add graphics for ropes
[L] Create graphics for bubbles and soap (not necessary for milestone2)

-new enemies need to be designed and added

Beyond Milestone2
~~~~~~~~~~~~~~~~~
- More things than just levels on the worldmap (similar to SMB3)
- if we have a logical framerate we could record/play demos by simply storing
  the pressed keys in each frame...

[L] --Scons--
We can just stay with jam for now. Compared to scons jam is at least faster and
doesn't suffer from the problems below.

 * [H] Add an install target - done (however scons is creating stupid .sconsign
                                     files at the install location :-/)
 * [M] improve opengl check to work on win32 and eventually more strange
   systems again
 * [H] Make sure compilation on win32 and cross-compilation works
 * [M] compile some test executables to test for SDL, SDL_mixer and SDL_image.
   Also test for version of SDL_mixer and SDL_image
 * [M] Create a distclean target
 * [M] Create a dist target
 * [M] Add instructions to the README
 * [L] If all of the [H] and [M] issues are fixed, remove autoconf/automake
 * [L] Take a look if it is possible to make it a bit more quiet. (Similar to
     linux kernel, samba or jam output would be optimum, ie.
       C++ build/linux/src/bla.o
       C++ build/linux/src/blup.o
       C++ build/linux/src/error.o
          Error on line xx in error.o: This source contained an error

       g++ -Wall .... -o build/linux/src/error.o src/error.cpp
